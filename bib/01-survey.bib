@inproceedings{leather2020machine,
  title={Machine learning in compilers: Past, present and future},
  author={Leather, Hugh and Cummins, Chris},
  booktitle={2020 Forum for Specification and Design Languages (FDL)},
  pages={1--8},
  year={2020},
  organization={IEEE},
  link = {https://doi.org/10.1109/FDL50818.2020.9232934},
  abstract = {Writing optimising compilers is difficult. The range of programs that may be presented to the compiler is huge and the systems on which they run are complex, heterogeneous, non-deterministic, and constantly changing. The space of possible optimisations is also vast, making it very hard for compiler writers to design heuristics that take all of these considerations into account. As a result, many compiler optimisations are out of date or poorly tuned. Near the turn of the century it was first shown how compilers could be made to automatically search the optimisation space, producing programs far better optimised than previously possible, and without the need for compiler writers to worry about architecture or program specifics. The searches, though, were slow, so in the years that followed, machine learning was developed to learn heuristics from the results of previous searches so that thereafter the search could be avoided and much of the benefit could be gained in a single shot. In this paper we will give a retrospective of machine learning in compiler optimisation from its earliest inception, through some of the works that set themselves apart, to today's deep learning, finishing with our vision of the field's future.},
}

@article{wang2018machine,
  title={Machine learning in compiler optimisation},
  author={Wang, Zheng and O'Boyle, Michael},
  journal={arXiv preprint arXiv:1805.03441},
  year={2018},
  link = {10.1109/JPROC.2018.2817118}
}